# Book Table
booktable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "bookid"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "bookid"
        KeyType: "HASH"
    TableName: "Books"
    Tags:
      - Key: name
        Value: book-table

# Order Table
ordertable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userid"
        AttributeType: "S"
      - AttributeName: "orderid"
        AttributeType: "S"
      - AttributeName: "bookid"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "userid"
        KeyType: "HASH"
      - AttributeName: "orderid"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "bookid"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    TableName: "Orders"
    Tags:
      - Key: name
        Value: order-table

# Cognito User Pool
CognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - email
    UserPoolName: "BooksUserPool"

# Cognito User Pool Client
CognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: web
    UserPoolId: !Ref CognitoUserPool

# Cognito Admin Group
CognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Grupo de administradores"
    GroupName: "Admin"
    Precedence: 0
    RoleArn: !GetAtt CognitoAdminIAMRole.Arn
    UserPoolId: !Ref CognitoUserPool

# Cognito Admin IAM Role
CognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Description: Rol para el grupo de administradores de cognito
    Policies:
      - PolicyName: Books-Admin-Group-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt booktable.Arn
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt ordertable.Arn
    RoleName: Admin-Role
# Cognito Customers Group
CognitoUsersGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: Grupo de clientes
    GroupName: "Customers"
    Precedence: 1
    RoleArn: !GetAtt CognitoCustomersIAMRole.Arn
    UserPoolId: !Ref CognitoUserPool

# Cognito Customers IAM Role
CognitoCustomersIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Description: Rol para el grupo de clientes de cognito
    Policies:
      - PolicyName: Books-Customers-Group-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt ordertable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchGet
              Resource:
                - !GetAtt booktable.Arn
    RoleName: Customers-Role


package:
  include:
    - schema.graphql

custom:
  appSync:
    name: Book-AppSync-API
    authenticationType: AMAZON_COGNITO_USER_POOLS       
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW 
      userPoolId: !Ref CognitoUserPool
    schema: schema.graphql
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: booktable
        type: Query
        field: getBookbyID 
      - dataSource: booktable
        type: Mutation
        field: createBook 
    dataSources:
      - type: AMAZON_DYNAMODB
        name: booktable
        config:
          tableName: !Ref booktable


schema {
    query: Query
    mutation: Mutation
}

type Query {
    getBookbyID(bookid: ID!): Book!
    allBook(limit: Int!, nextToken: String): BookPage
    myOrders(limit: Int!, nextToken: String): OrdersItemPage
}

type OrdersItemPage {
    ordersItem: [OrdersItem]
    nextToken: String
}

type OrdersItem {
    userid: ID!
    orderid: ID!
    book: Book!
    quantity: Int!
}

type BookPage {
    books: [Book]
    nextToken: String
}

type Book {
    bookid: ID!
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!

}

type Mutation {
    createBook(newBook: BookInput): Book! @aws_auth(cognito_grups["Admin"])
    createOrders(newOrders: OrdersInput): Boolean!
}

input OrdersInput {
    items: [OrdersItemsInput]
}

input OrdersItemsInput {
    bookid: ID!
    quantity: Int!
}

input BookInput {
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float! 
}

${file(resources.yml)}

type Query {
    getBookbyID(bookid: ID!): Book!
}

type Book {
    bookid: ID!
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type Mutation {
    createBook(newBook: BookInput): Book! @aws_auth(cognito_grups["Admin"])
}

input BookInput {
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float! 
}

schema {
    query: Query
    mutation: Mutation
}


	
plugins:
   - serverless-appsync-plugin

{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key": {
        "userid" : $util.dynamodb.toDynamoDBJson($context.identity.sub),
        "orderid" : $util.dynamodb.toDynamoDBJson($util.autoId())
    },
    "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.newOrders.items)
}


#foreach($item in $ctx.args.newOrders.items)
  $item.${field1}
  $item.${field2}
  ...
#end

#####################################################

appSync:
    name: ${self:service}-gql-${self:provider.stage}
    apiKey: ${self:service}-${opt:stage}
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: ${opt:region, 'us-west-2'}
      defaultAction: ALLOW
      userPoolId: ${ssm:/${opt:stage}/dm-idp-provider-cd/cognito-user-pool} 
    schema: Gql/schema.graphql
    serviceRole:
      Ref: AppSyncServiceRole
    logConfig:
      loggingRoleArn:
        Fn::GetAtt:
          - AppSyncServiceRole
          - Arn
      level: ALL # NONE | ERROR | ALL
    mappingTemplatesLocation: Gql/MappingTemplates
    mappingTemplates:
      
      - dataSource: DSConsentApi
        type: Query
        field: GetLegalTerms
        request: consent_manager/GetLegalTerms.request.vm
        response: consent_manager/GetLegalTerms.response.vm
      
      - dataSource: DSConsentApi
        type: Query
        field: GetSubjects
        request: consent_manager/GetSubjects.request.vm
        response: consent_manager/GetSubjects.response.vm
      
      - dataSource: DSConsentApi
        type: Query
        field: GetConsents
        request: consent_manager/GetConsents.request.vm
        response: consent_manager/GetConsents.response.vm

      - dataSource: DSClauseContent
        type: Mutation
        field: MergeTouContent
        request: 'tou_manager/MergeTouContent.request.vm'
        response: 'tou_manager/MergeTouContent.response.vm'
      
      - dataSource: DSClauseContent
        type: Mutation
        field: MergeClauseContent
        request: 'tou_manager/MergeClauseContent.request.vm'
        response: 'tou_manager/MergeClauseContent.response.vm'
      
      - dataSource: DSClauseContent
        type: Query
        field: GetClauseTemplateDetail
        request: 'tou_manager/ClauseTemplateDetail.request.vm'
        response: 'tou_manager/ClauseTemplateDetail.response.vm'
      
      - dataSource: DSTouManager
        type: Query
        field: GetClausesRds
        request: tou_manager/GetClausesRds.request.vm
        response: tou_manager/GetClausesRds.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetClausesByQuery
        request: tou_manager/GetClausesByQuery.request.vm
        response: tou_manager/GetClausesByQuery.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTou
        request: tou_manager/GetTou.request.vm
        response: tou_manager/GetTou.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTousRds
        request: tou_manager/GetTousRds.request.vm
        response: tou_manager/GetTousRds.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTousByQuery
        request: tou_manager/GetTousByQuery.request.vm
        response: tou_manager/GetTousByQuery.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTouClauses
        request: tou_manager/GetTouClauses.request.vm
        response: tou_manager/GetTouClauses.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTOURds
        request: tou_manager/CreateTouRds.request.vm
        response: tou_manager/CreateTouRds.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTouFromTOU
        request: tou_manager/CreateTouFromTOU.request.vm
        response: tou_manager/CreateTouFromTOU.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: UpdateTou
        request: tou_manager/UpdateTou.request.vm
        response: tou_manager/UpdateTou.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: DeleteTou
        request: tou_manager/DeleteTou.request.vm
        response: tou_manager/DeleteTou.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTouVersion
        request: tou_manager/CreateTouVersion.request.vm
        response: tou_manager/CreateTouVersion.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: AddTouRdsClause
        request: tou_manager/AddTouRdsClause.request.vm
        response: tou_manager/AddTouRdsClause.response.vm

      - dataSource: DSTouManager
        type: Mutation
        field: DeleteTouRdsClause
        request: tou_manager/DeleteTouRdsClause.request.vm
        response: tou_manager/DeleteTouRdsClause.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTouFromTemplate
        request: tou_manager/CreateTouFromTemplate.request.vm
        response: tou_manager/CreateTouFromTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: DuplicateTou
        request: tou_manager/DuplicateTou.request.vm
        response: tou_manager/DuplicateTou.response.vm

      - dataSource: DSTouManager
        type: Mutation
        field: PublishTou
        request: tou_manager/PublishTou.request.vm
        response: tou_manager/PublishTou.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTemplate
        request: template_manager/CreateTemplate.request.vm
        response: template_manager/CreateTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateFromTemplate
        request: template_manager/CreateFromTemplate.request.vm
        response: template_manager/CreateFromTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: UpdateTemplate
        request: template_manager/UpdateTemplate.request.vm
        response: template_manager/UpdateTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: DeleteTemplate
        request: template_manager/DeleteTemplate.request.vm
        response: template_manager/DeleteTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: PublishTemplate
        request: template_manager/PublishTemplate.request.vm
        response: template_manager/PublishTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: CreateTemplateVersion
        request: template_manager/CreateTemplateVersion.request.vm
        response: template_manager/CreateTemplateVersion.response.vm

      - dataSource: DSTouManager
        type: Mutation
        field: AddTemplateClause
        request: template_manager/AddTemplateClause.request.vm
        response: template_manager/AddTemplateClause.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTouStates
        request: tou_manager/GetTouStates.request.vm
        response: tou_manager/GetTouStates.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTemplate
        request: template_manager/GetTemplate.request.vm
        response: template_manager/GetTemplate.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTemplates
        request: template_manager/GetTemplates.request.vm
        response: template_manager/GetTemplates.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTemplatesByQuery
        request: template_manager/GetTemplatesByQuery.request.vm
        response: template_manager/GetTemplatesByQuery.response.vm
      
      - dataSource: DSTouManager
        type: Query
        field: GetTemplateClauses
        request: template_manager/GetTemplateClauses.request.vm
        response: template_manager/GetTemplateClauses.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: DeleteTemplateClause
        request: template_manager/DeleteTemplateClause.request.vm
        response: template_manager/DeleteTemplateClause.response.vm
      
      - dataSource: DSTouManager
        type: Mutation
        field: SaveContent
        request: template_manager/SaveContent.request.vm
        response: template_manager/SaveContent.response.vm
      
    dataSources:
      - type: HTTP
        name: DSTouManager
        description: 'Tou Manager api Http data source'
        config:
          endpoint: ${ssm:/${opt:stage}/dm-tou-manager-cd/tou-apigql-url}
          
      - type: HTTP
        name: DSClauseContent
        description: 'Clause Content api Http data source'
        config:
          endpoint: ${ssm:/${opt:stage}/dm-clause-content/apigateway-url}
      
      - type: HTTP
        name: DSConsentApi
        description: 'Consent api Http data source'
        config:
          endpoint: ${ssm:/${opt:stage}/dm-consentapi-gtou/apigql-url}

    substitutions:
      CONSENT_GQL_API_KEY: ${ssm:/${opt:stage}/dm-consentapi-gtou/apigql-apikey}
      TOU_MANAGER_API_KEY: ${ssm:/${opt:stage}/dm-tou-manager-cd/tou-apigql-apikey}
      CLAUSE_CONTENT_API_KEY:  ${ssm:/${opt:stage}/dm-clause-content/apigateway-apikey}