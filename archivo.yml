# Book Table
booktable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "bookid"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "bookid"
        KeyType: "HASH"
    TableName: "Books"
    Tags:
      - Key: name
        Value: book-table

# Order Table
ordertable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: "userid"
        AttributeType: "S"
      - AttributeName: "orderid"
        AttributeType: "S"
      - AttributeName: "bookid"
        AttributeType: "S"
      - AttributeName: "createdAt"
        AttributeType: "S"
    BillingMode: PAY_PER_REQUEST
    KeySchema:
      - AttributeName: "userid"
        KeyType: "HASH"
      - AttributeName: "orderid"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema:
          - AttributeName: "bookid"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection:
          ProjectionType: ALL
    TableName: "Orders"
    Tags:
      - Key: name
        Value: order-table

# Cognito User Pool
CognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:
    UsernameAttributes:
      - email
    UserPoolName: "BooksUserPool"

# Cognito User Pool Client
CognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties:
    ClientName: web
    UserPoolId: !Ref CognitoUserPool

# Cognito Admin Group
CognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: "Grupo de administradores"
    GroupName: "Admin"
    Precedence: 0
    RoleArn: !GetAtt CognitoAdminIAMRole.Arn
    UserPoolId: !Ref CognitoUserPool

# Cognito Admin IAM Role
CognitoAdminIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Description: Rol para el grupo de administradores de cognito
    Policies:
      - PolicyName: Books-Admin-Group-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt booktable.Arn
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt ordertable.Arn
    RoleName: Admin-Role
# Cognito Customers Group
CognitoUsersGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties:
    Description: Grupo de clientes
    GroupName: "Customers"
    Precedence: 1
    RoleArn: !GetAtt CognitoCustomersIAMRole.Arn
    UserPoolId: !Ref CognitoUserPool

# Cognito Customers IAM Role
CognitoCustomersIAMRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Description: Rol para el grupo de clientes de cognito
    Policies:
      - PolicyName: Books-Customers-Group-Policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt ordertable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:BatchGet
              Resource:
                - !GetAtt booktable.Arn
    RoleName: Customers-Role


package:
  include:
    - schema.graphql

custom:
  appSync:
    name: Book-AppSync-API
    authenticationType: AMAZON_COGNITO_USER_POOLS       
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW 
      userPoolId: !Ref CognitoUserPool
    schema: schema.graphql
    mappingTemplatesLocation: mapping-templates
    mappingTemplates:
      - dataSource: booktable
        type: Query
        field: getBookbyID 
      - dataSource: booktable
        type: Mutation
        field: createBook 
    dataSources:
      - type: AMAZON_DYNAMODB
        name: booktable
        config:
          tableName: !Ref booktable


schema {
    query: Query
    mutation: Mutation
}

type Query {
    getBookbyID(bookid: ID!): Book!
    allBook(limit: Int!, nextToken: String): BookPage
    myOrders(limit: Int!, nextToken: String): OrdersItemPage
}

type OrdersItemPage {
    ordersItem: [OrdersItem]
    nextToken: String
}

type OrdersItem {
    userid: ID!
    orderid: ID!
    book: Book!
    quantity: Int!
}

type BookPage {
    books: [Book]
    nextToken: String
}

type Book {
    bookid: ID!
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!

}

type Mutation {
    createBook(newBook: BookInput): Book! @aws_auth(cognito_grups["Admin"])
    createOrders(newOrders: OrdersInput): Boolean!
}

input OrdersInput {
    items: [OrdersItemsInput]
}

input OrdersItemsInput {
    bookid: ID!
    quantity: Int!
}

input BookInput {
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float! 
}

${file(resources.yml)}

type Query {
    getBookbyID(bookid: ID!): Book!
}

type Book {
    bookid: ID!
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

type Mutation {
    createBook(newBook: BookInput): Book! @aws_auth(cognito_grups["Admin"])
}

input BookInput {
    title: String!
    descriptions: String
    imageURL: AWSURL
    author: String!
    price: Float! 
}

schema {
    query: Query
    mutation: Mutation
}


	
plugins:
   - serverless-appsync-plugin

{
    "version" : "2017-02-28",
    "operation" : "PutItem",
    "key": {
        "userid" : $util.dynamodb.toDynamoDBJson($context.identity.sub),
        "orderid" : $util.dynamodb.toDynamoDBJson($util.autoId())
    },
    "attributeValues": $util.dynamodb.toMapValuesJson($ctx.args.newOrders.items)
}


#foreach($item in $ctx.args.newOrders.items)
  $item.${field1}
  $item.${field2}
  ...
#end